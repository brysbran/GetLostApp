@page "/share"

<div class="center-container">
    <h1>Share</h1>
    <p>Share your hiking experiences and see what others have to say</p>
</div>

<!-- Form to create a new post -->
<div class="center-container">
    <h2>Create New Post</h2>
    
    <div>
        <label>Enter the Trail: </label>
        <input @bind="newPost.TrailName" />
    </div>
    <div>
        <label>Description:</label>
        <input @bind="newPost.Description" />
    </div>
    <div>
        <label>Rating:</label>
        <input type="number" min="1" max="5" @bind="newPost.Rating" />
    </div>

    <div>
        <label>Upload Photo:</label>
        <InputFile OnChange="HandleFileChange" />
    </div>
    <button @onclick="CreatePost">Create Post</button>
</div>

<!-- Display existing posts -->
@if (userPosts != null && userPosts.Any())
{
    <div class="center-container">
        <h2>Existing Posts</h2>
        <div class="user-posts-scroll-container">
            <div class="user-posts-container">
                @foreach (var post in userPosts)
                {
                    <div class="user-post-card">
                        <p>Description: @post.Description</p>
                        <p>Rating: @post.Rating</p>
                        <p>Trail: @post.TrailName</p>
                        <img src="@post.PhotoPath" alt="User Post Photo" />
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<UserPostModel> userPosts;
    private UserPostModel newPost = new UserPostModel();
    private IBrowserFile uploadedFile;
    private List<TrailModel> trails = new List<TrailModel>();

    // Inject HttpClient into the component
    [Inject]
    private HttpClient HttpClient { get; set; }

    // Event handler for file upload
    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        uploadedFile = e.GetMultipleFiles().FirstOrDefault();
    }

    // Event handler to create a new post
    private async Task CreatePost()
    {
        Console.WriteLine("CreatePost() called");
        try
        {
            using (var formContent = new MultipartFormDataContent())
            {
                // Add user post data to the form content
                formContent.Add(new StringContent(newPost.Description), "Description");
                formContent.Add(new StringContent(newPost.Rating.ToString()), "Rating");
                formContent.Add(new StringContent(newPost.TrailName), "TrailName");

                // Check if a file is uploaded
                if (uploadedFile != null)
                {
                    formContent.Add(new StreamContent(uploadedFile.OpenReadStream()), "photo", uploadedFile.Name);
                }

                // Post data to the API endpoint
                HttpResponseMessage response = await HttpClient.PostAsync("/user/posts", formContent);


                // Check the HTTP status code
                if (response.IsSuccessStatusCode)
                {
                    // Post was successful
                    Console.WriteLine("Post created successfully!");

                    // Refresh the list of user posts
                    await LoadUserPosts();
                }
                else if (response.StatusCode == (System.Net.HttpStatusCode)422)
                {
                    // Handle 422 Unprocessable Entity (validation error)
                    Console.WriteLine("Validation error. Please check your input.");

                    // Read the response content for more details
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Response content: {responseContent}");
                }
                else if (response.StatusCode == (System.Net.HttpStatusCode)400)
                {
                    // Handle 400 Bad Request
                    Console.WriteLine("Bad Request. Check the payload and validation errors.");

                    // Read the response content for more details
                    var responseContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Response content: {responseContent}");
                }
                else
                {
                    // Handle other status codes (e.g., 500 Internal Server Error)
                    Console.WriteLine($"Unexpected response: {response.StatusCode}");
                }
            }
        }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating post: {ex.Message}");
            }
        }

    // Load user posts from the API
    private async Task LoadUserPosts()
    {
        try
        {
            userPosts = await HttpClient.GetFromJsonAsync<List<UserPostModel>>("user/posts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user posts: {ex.Message}");
        }
    }

    // Load user posts when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Set the base address for relative URIs
        HttpClient.BaseAddress = new Uri("http://127.0.0.1:8000/");

        await LoadUserPosts();
       // await LoadTrails();
    }

    // Load trails from the API
   /* private async Task LoadTrails()
    {
        try
        {
            trails = await HttpClient.GetFromJsonAsync<List<TrailModel>>("trails");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching trails");
        }
    }*/

    public class TrailModel
    {
        public string TrailId { get; set; }
        public string TrailName { get; set; }
    }

    public class UserPostModel
    {
        public string TrailId { get; set; }
        public string TrailName { get; set; }
        public string Description { get; set; }
        public string PhotoPath { get; set; }
        public int Rating { get; set; }
    }
}